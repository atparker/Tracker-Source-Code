#include <SoftwareSerial.h>
#include <TinyGPS.h>
#include <SPI.h>
#include <RH_RF95.h>
TinyGPS gps;
RH_RF95 rf95;
SoftwareSerial ss(3, 4); // Arduino RX, TX to conenct to GPS module.

static void smartdelay(unsigned long ms);

int GPS = 5;
int x;

char DeviceID[10]="T1"; //DeviceID or Device identifier in GPSWOX.com

String datastring1="";
String datastring2="";
String datastring3="";

uint8_t datasend[50];    //Storage latitude, longtitude and power level

char gps_lon[50]={"\0"};  //Storage GPS info
char gps_lat[20]={"\0"}; //Storage latitude
char power_level[20]={"\0"}; //Storage power level

float flat1, flon1, flat2, flon2, flat3, flon3, plevel;
unsigned long age1, age2, age3;

void setup()
{
  // initialize digital pin  as an output.
  pinMode(GPS, OUTPUT);
  
  // initialize both serial ports:
  Serial.begin(9600);  // Serial to print out GPS info in Arduino IDE
  ss.begin(9600);       // SoftSerial port to get GPS data. 
  while (!Serial);

   if (!rf95.init()) {  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on
    Serial.println("Starting LoRa failed!");
    while (1);
  }
  
  /* Set frequency is 915MHz,SF is 7,SB is 125KHz,CR is 4/5 and Tx power is 20dBm */
  rf95.setFrequency(915);
  rf95.setSpreadingFactor(7);
  rf95.setSignalBandwidth(125E3);
  rf95.setCodingRate4(5);
  rf95.setTxPower(20,false);
  
  Serial.println("Ready to send!");
  
}

void loop()
{
  x = 1;
  
  voltagelevel();

  if (plevel == 0)
      {
        datastring1 +=dtostrf(flat1, 0, 6, gps_lat); 
        datastring2 +=dtostrf(flon1, 0, 6, gps_lon);
        datastring3 +=dtostrf(plevel, 0, 6, power_level);
    
        strcat(gps_lat,",");
        strcat(gps_lat,gps_lon); 
        strcat(gps_lat,","); 
        strcat(gps_lat,power_level);
        strcat(gps_lat,","); 
        strcat(gps_lat,DeviceID);
        strcat(gps_lat,",");
        strcpy((char *)datasend,gps_lon);//the format of datasend is latitude,longtitude,power level,DeviceID
        Serial.println((char *)datasend);
      
        // send data
        rf95.send(datasend, sizeof(datasend));  
        rf95.waitPacketSent();
      
        smartdelay(1000);

        while(1);
      }
  
  digitalWrite(GPS, LOW);
  smartdelay(1800000);
  
  digitalWrite(GPS, HIGH);

  voltagelevel();
  if (plevel == 0)
      {
        datastring1 +=dtostrf(flat1, 0, 6, gps_lat); 
        datastring2 +=dtostrf(flon1, 0, 6, gps_lon);
        datastring3 +=dtostrf(plevel, 0, 6, power_level);
        
        strcat(gps_lat,",");
        strcat(gps_lat,gps_lon); 
        strcat(gps_lat,","); 
        strcat(gps_lat,power_level);
        strcat(gps_lat,","); 
        strcat(gps_lat,DeviceID);
        strcat(gps_lat,",");
        strcpy((char *)datasend,gps_lon);//the format of datasend is latitude,longtitude,power level,DeviceID
        Serial.println((char *)datasend);
          
        // send data
        rf95.send(datasend, sizeof(datasend));  
        rf95.waitPacketSent();
          
        smartdelay(1000);
    
        while(1);
      }
        
   while(x)
   {
      gps.f_get_position(&flat1, &flon1, &age1);      
      flon1 == TinyGPS::GPS_INVALID_F_ANGLE ? 0.0 : flon1, 6;//save six decimal places 
      flat1 == TinyGPS::GPS_INVALID_F_ANGLE ? 0.0 : flat1, 6;
      smartdelay(1000);
    
      gps.f_get_position(&flat1, &flon1, &age1);      
      flon2 == TinyGPS::GPS_INVALID_F_ANGLE ? 0.0 : flon1, 6;//save six decimal places 
      flat2 == TinyGPS::GPS_INVALID_F_ANGLE ? 0.0 : flat1, 6;
      smartdelay(1000);
    
      gps.f_get_position(&flat1, &flon1, &age1);      
      flon3 == TinyGPS::GPS_INVALID_F_ANGLE ? 0.0 : flon1, 6;//save six decimal places 
      flat3 == TinyGPS::GPS_INVALID_F_ANGLE ? 0.0 : flat1, 6;
    
      if ((flon1 == flon2) && (flon1 == flon3) && (flat1 == flat2) && (flat1 == flat3) && (flon1 != 1000.000000))
      {
        datastring1 +=dtostrf(flat1, 0, 6, gps_lat); 
        datastring2 +=dtostrf(flon1, 0, 6, gps_lon);
    
        strcat(gps_lat,",");
        strcat(gps_lat,gps_lon); 
        strcat(gps_lat,","); 
        strcat(gps_lat,power_level);
        strcat(gps_lat,","); 
        strcat(gps_lat,DeviceID);
        strcat(gps_lat,",");
        strcpy((char *)datasend,gps_lon);//the format of datasend is latitude,longtitude,power level,DeviceID
        Serial.println((char *)datasend);
      
        // send data
        rf95.send(datasend, sizeof(datasend));  
        rf95.waitPacketSent();
      
        smartdelay(1000);

        x = 0;
      }
   }
}

static void smartdelay(unsigned long ms)
{
  unsigned long start = millis();
  do 
  {
    while (ss.available())
    {
      //ss.print(Serial.read());
      gps.encode(ss.read());
    }
  } while (millis() - start < ms);
}

//If the packet arrive LG01, LG01 will send a ACK and here will receive it and turn on the led.  
void receivepacket(){
    uint8_t indatabuf[RH_RF95_MAX_MESSAGE_LEN];
    uint8_t len = sizeof(indatabuf);
    
    if (rf95.waitAvailableTimeout(3000))
     { 
       // Should be a reply message for us now   
       if (rf95.recv(indatabuf, &len))
         {
         Serial.println((char*)indatabuf);        
         //digitalWrite(LED, HIGH);   // turn the LED on (HIGH is the voltage level)
         Serial.println("receive success!");
         }
         else 
         {
          //digitalWrite(LED, LOW);    // turn the LED off by making the voltage LOW
          Serial.println("receive failed!");
         }
    }
    else
    {
      // Serial print "No reply, is track_GPS_server running or overranging the receive distance?" if don't get the reply .
      //Serial.println("No reply, is track_GPS_Server running or overranging the receive distance?");
      //digitalWrite(LED, LOW);    // turn the HEART_LED off by making the voltage LOW
    }
}

 void voltagelevel()
{
  int sensorValue = analogRead(A0); //read the A0 pin value
  float voltage = sensorValue * (5.00 / 1023.00) * 2; //convert the value to a true voltage.
  if (voltage > 6.8) //set the voltage considered low battery here
  {
    datastring3 = "Good";
    plevel = 2;
  }
  else if (voltage > 6.5) //set the voltage considered low battery here
  {
    datastring3 = "Low";
    plevel = 1;
  }
  else //set the voltage considered low battery here
  {
    datastring3 = "Dead";
    plevel = 0;
  }
}
